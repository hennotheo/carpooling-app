using CarPoolingAPI.DTO;
using CarPoolingAPI.Exceptions;
using CarPoolingAPI.Services;
using CarPoolingAPICore.Interface;
using CarPoolingAPICore.Models;
using Moq;

namespace Tests_CarPoolingAPI;

[TestFixture(Category = "Authentication")]
public class AuthenticationServicesTests
{
    private Mock<ITokenService> _mockTokenService;
    private Mock<IUserService> _mockUserService;
    private AuthenticationService _authenticationService;

    [SetUp]
    public void Setup()
    {
        _mockTokenService = new Mock<ITokenService>();
        _mockUserService = new Mock<IUserService>();
        _authenticationService = new AuthenticationService(_mockTokenService.Object, _mockUserService.Object);

        _mockTokenService.Setup(token => token.GenerateToken(It.IsAny<User>())).Returns(TestData.VALID_TOKEN);
    }

    [TearDown]
    public void TearDown()
    {
        _authenticationService.Dispose();
    }

    [Test]
    public void RegisterUser_NoThrow()
    {
        Assert.DoesNotThrowAsync(async () => await _authenticationService.Register(TestData.ValidRegisterRequest));
    }

    [Test]
    public async Task RegisterUser_ValidReturnToken()
    {
        var result = await _authenticationService.Register(TestData.ValidRegisterRequest);

        Assert.That(result.Token, Is.EqualTo(TestData.VALID_TOKEN)); //Token is generated by the mocked token service
    }

    [Test]
    public void RegisterUser_ThrowWhenRegisterRequestEmpty()
    {
        Assert.ThrowsAsync<BadRequestServiceException>(async () => await _authenticationService.Register(new UserRegisterRequestDto()));
    }

    [Test]
    [TestCase(""), TestCase("%%%98489")]
    public void RegisterUser_ThrowWhenFirstNameInvalid(string value)
    {
        UserRegisterRequestDto invalid = TestData.ValidRegisterRequest;
        invalid.FirstName = value;
        Assert.ThrowsAsync<BadRequestServiceException>(async () => await _authenticationService.Register(invalid));
    }

    [Test]
    [TestCase(""), TestCase("%%%98489")]
    public void RegisterUser_ThrowWhenLastNameInvalid(string value)
    {
        UserRegisterRequestDto invalid = TestData.ValidRegisterRequest;
        invalid.LastName = value;
        Assert.ThrowsAsync<BadRequestServiceException>(async () => await _authenticationService.Register(invalid));
    }

    [Test]
    [TestCase(""), TestCase("%%%98489"), TestCase("user.zzzz")]
    public void RegisterUser_ThrowWhenEmailInvalid(string value)
    {
        UserRegisterRequestDto invalid = TestData.ValidRegisterRequest;
        invalid.Email = value;
        Assert.ThrowsAsync<BadRequestServiceException>(async () => await _authenticationService.Register(invalid));
    }

    [Test]
    [TestCase(""), TestCase("e"), TestCase("hhhhhhhhhhhhh"), TestCase("okoijdozhdoizj")]
    public void RegisterUser_ThrowWhenPasswordInvalid(string value)
    {
        UserRegisterRequestDto invalid = TestData.ValidRegisterRequest;
        invalid.Password = value;
        Assert.ThrowsAsync<BadRequestServiceException>(async () => await _authenticationService.Register(invalid));
    }

    [Test]
    public async Task RegisterUser_ValidAddUserToService()
    {
        _mockUserService.Setup(service => service.AddUser(It.IsAny<UserRegisterRequestDto>())).Verifiable();

        await _authenticationService.Register(TestData.ValidRegisterRequest);
        _mockUserService.Verify(service => service.AddUser(It.IsAny<UserRegisterRequestDto>()), Times.Once);
    }

    [Test]
    public void RegisterUser_ThrowWhenUserAlreadyExists()
    {
        _mockUserService.Setup(service => service.AddUser(It.IsAny<UserRegisterRequestDto>())).ThrowsAsync(new ConflictServiceException("TEST"));

        Assert.ThrowsAsync<ConflictServiceException>(async () => await _authenticationService.Register(TestData.ValidRegisterRequest));
    }

    [Test]
    public async Task RegisterUser_ValidReturnUserId()
    {
        _mockUserService.Setup(service => service.AddUser(It.IsAny<UserRegisterRequestDto>())).ReturnsAsync(TestData.ValidUser);

        UserRegisterResponseDto response = await _authenticationService.Register(TestData.ValidRegisterRequest);
        Assert.That(response.UserId, Is.EqualTo(TestData.ValidUser.Id));
    }
}